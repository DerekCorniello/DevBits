/api

  /auth

    /signup
      POST:
        Request Body:
        {
          "username": "new_user",
          "email": "user@example.com",
          "password": "secure_password"
        }
        Description: Register a new user (username, email, password).
        Security: Ensure password is hashed before saving to the DB. Use email validation.
        Response:
        {
          "message": "User registered successfully"
        }

    /login
      POST:
        Request Body:
        {
          "username": "user",
          "password": "secure_password"
        }
        Description: Authenticate a user and return a JWT token.
        Security: Use bcrypt or another hashing mechanism to verify password. Return JWT token upon successful login.
        Response:
        {
          "access_token": "jwt_token"
        }

    /logout
      POST:
        Description: Invalidate the user's session and logout.
        Security: Ensure access token is invalidated server-side (if using a stateful session).
        Response: 200 OK

    /refresh-token
      POST:
        Request Body: { "refresh_token": "your-refresh-token" }
        Description: Issue a new JWT token using a refresh token.
        Security: Ensure refresh token expiration is respected.
        Response:
        {
          "access_token": "new_jwt_token"
        }

  /users

    /{user_id}
      GET:
        Description: Get a user's profile by `user_id`.
        Response:
        {
          "user_id": 1,
          "username": "user1",
          "profile_pic": "url-to-image",
          "bio": "Some bio",
          "links": ["link1", "link2"]
        }

    /profile
      PUT:
        Request Body:
        {
          "username": "new_username",
          "bio": "Updated bio",
          "profile_pic": "new-url",
          "links": ["new-link1", "new-link2"]
        }
        Description: Update user profile (bio, profile pic, links).
        Security: Ensure the user can only update their own profile.
        Response:
        {
          "message": "Profile updated successfully"
        }

    /change-password
      PUT:
        Request Body:
        {
          "old_password": "old_password",
          "new_password": "new_secure_password"
        }
        Description: Change the user's password.
        Security: Ensure old password matches before updating. Hash new password before saving.
        Response:
        {
          "message": "Password updated successfully"
        }

  /projects

    /create
      POST:
        Request Body:
        {
          "name": "Project Name",
          "description": "Project Description",
          "status": "In Progress",
          "links": ["link1", "link2"],
          "tags": ["tag1", "tag2"]
        }
        Description: Create a new project.
        Security: Ensure that the user is authenticated and authorized to create projects.
        Response:
        {
          "project_id": 1,
          "message": "Project created successfully"
        }

    /{project_id}
      GET:
        Description: Get project details by `project_id`.
        Response:
        {
          "project_id": 1,
          "name": "Project Name",
          "description": "Project Description",
          "status": "In Progress",
          "links": ["link1", "link2"],
          "tags": ["tag1", "tag2"],
          "user_id": 1
        }

    /update/{project_id}
      PUT:
        Request Body:
        {
          "name": "Updated Name",
          "description": "Updated Description",
          "status": "Completed",
          "links": ["new-link1"],
          "tags": ["updated-tag"]
        }
        Description: Update a project by `project_id`.
        Security: Ensure only the project owner or admin can update the project.
        Response:
        {
          "message": "Project updated successfully"
        }

    /delete/{project_id}
      DELETE:
        Description: Delete a project by `project_id`.
        Security: Ensure the user is the project owner or has admin privileges.
        Response:
        {
          "message": "Project deleted successfully"
        }

    /like
      POST:
        Request Body:
        {
          "project_id": 1
        }
        Description: Like a project.
        Security: Ensure the user is authenticated.
        Response:
        {
          "message": "Project liked successfully"
        }

    /unlike
      DELETE:
        Request Body:
        {
          "project_id": 1
        }
        Description: Unlike a project.
        Security: Ensure the user is authenticated.
        Response:
        {
          "message": "Project unliked successfully"
        }

  /posts

    /create
      POST:
        Request Body:
        {
          "content": "This is a new post",
          "project_id": 1
        }
        Description: Create a new post for a project.
        Security: Ensure the user is authenticated.
        Response:
        {
          "post_id": 1,
          "message": "Post created successfully"
        }

    /{post_id}
      GET:
        Description: Retrieve a post by `post_id`.
        Response:
        {
          "post_id": 1,
          "content": "This is a post",
          "time": "2024-11-14T00:00:00Z",
          "user_id": 1,
          "project_id": 1
        }

    /update/{post_id}
      PUT:
        Request Body:
        {
          "content": "Updated post content"
        }
        Description: Update a post by `post_id`.
        Security: Ensure only the post owner can update the post.
        Response:
        {
          "message": "Post updated successfully"
        }

    /delete/{post_id}
      DELETE:
        Description: Delete a post by `post_id`.
        Security: Ensure the user is the post owner or has admin privileges.
        Response:
        {
          "message": "Post deleted successfully"
        }

    /like
      POST:
        Request Body:
        {
          "post_id": 1
        }
        Description: Like a post.
        Security: Ensure the user is authenticated.
        Response:
        {
          "message": "Post liked successfully"
        }

    /unlike
      DELETE:
        Request Body:
        {
          "post_id": 1
        }
        Description: Unlike a post.
        Security: Ensure the user is authenticated.
        Response:
        {
          "message": "Post unliked successfully"
        }

  /comments

    /create
      POST:
        Request Body:
        {
          "post_id": 1,
          "content": "This is a comment"
        }
        Description: Add a comment to a post.
        Security: Ensure the user is authenticated.
        Response:
        {
          "comment_id": 1,
          "message": "Comment added successfully"
        }

    /{comment_id}
      GET:
        Description: Retrieve a comment by `comment_id`.
        Response:
        {
          "comment_id": 1,
          "content": "This is a comment",
          "time": "2024-11-14T00:00:00Z",
          "user_id": 1,
          "post_id": 1
        }

    /delete/{comment_id}
      DELETE:
        Description: Delete a comment by `comment_id`.
        Security: Ensure only the comment owner can delete the comment.
        Response:
        {
          "message": "Comment deleted successfully"
        }

    /like
      POST:
        Request Body:
        {
          "comment_id": 1
        }
        Description: Like a comment.
        Security: Ensure the user is authenticated.
        Response:
        {
          "message": "Comment liked successfully"
        }

    /unlike
      DELETE:
        Request Body:
        {
          "comment_id": 1
        }
        Description: Unlike a comment.
        Security: Ensure the user is authenticated.
        Response:
        {
          "message": "Comment unliked successfully"
        }
